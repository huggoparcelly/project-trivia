{"version":3,"sources":["services/fetchGravatarImage.js","Components/Header.jsx","services/fetchTrivia.js","Pages/Game.jsx","actions/index.js","services/fetchToken.js","Pages/Login.jsx","Pages/Configuracoes.jsx","Pages/Feedback.jsx","Pages/Ranking.jsx","App.js","serviceWorker.js","reducers/loginReducer.js","reducers/triviaReducer.js","reducers/timerReducer.js","reducers/index.js","store/index.js","index.js"],"names":["fetchGravatarImage","userEmail","emailHash","md5","toString","Header","player","JSON","parse","localStorage","getItem","name","score","gravatarEmail","src","alt","data-testid","Component","a","token","fetch","fetchApi","json","trivia","fetchTrivia","Game","props","saveTriviaOnGlobalState","bind","colorButton","nextQuestion","getTimer","state","counter","showColor","timerIsOver","seconds","stopTimer","this","setInterval","setState","prevState","resetScore","assertions","setItem","stringify","scoreToAdd","dispatchTrivia","triviaToDispatch","type","onClick","correctAnswer","difficulty","increaseAssertion","difficulttyMultiplier","saveScore","isCorrect","triviaQuest","questionToBeRendered","category","question","correct_answer","incorrect_answers","incorrectAnswersObject","rightAnswer","allAnswers","sort","map","answer","index","disabled","className","correctQuestion","key","handleClick","nextButton","to","renderGame","connect","results","dispatch","tokenRequest","then","response","tokenReturn","fetchAPI","Login","handleChange","checkInput","fetchAndRedirect","email","shouldRedirect","window","location","href","fetchToken","target","value","match","length","htmlFor","placeholder","onChange","settingsButton","Configuracoes","Feedback","renderPlayAgain","playAgain","renderRanking","feedbackMessage","Ranking","getPlayers","allPlayers","savePlayerInRanking","ranking","newPlayer","picture","push","b","renderInitialPage","App","exact","path","component","Boolean","hostname","initialStore","user","loginReducer","action","initialState","timer","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62bb2300.chunk.js","sourcesContent":["import md5 from 'crypto-js/md5';\n\nfunction fetchGravatarImage(userEmail) {\n  const emailHash = md5(userEmail).toString();\n  return `https://www.gravatar.com/avatar/${emailHash}`;\n}\n\nexport default fetchGravatarImage;\n","import React, { Component } from 'react';\nimport fetchGravatarImage from '../services/fetchGravatarImage';\n\nexport default class Header extends Component {\n  render() {\n    const state = JSON.parse(localStorage.getItem('state'));\n    const { player } = state;\n    const { name, score, gravatarEmail } = player;\n    return (\n      <div>\n        <header>\n          <img\n            src={ fetchGravatarImage(gravatarEmail) }\n            alt=\"your avatar\"\n            data-testid=\"header-profile-picture\"\n          />\n          <p data-testid=\"header-player-name\">{name}</p>\n          <p data-testid=\"header-score\">{score}</p>\n        </header>\n      </div>\n    );\n  }\n}\n","async function fetchTrivia() {\n  const token = localStorage.getItem('token');\n  const fetchApi = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n  const trivia = await fetchApi.json();\n  return trivia;\n}\nexport default fetchTrivia;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../Components/Header';\nimport { trivia } from '../actions';\nimport fetchTrivia from '../services/fetchTrivia';\nimport './Game.css';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.saveTriviaOnGlobalState = this.saveTriviaOnGlobalState.bind(this);\n    this.colorButton = this.colorButton.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.getTimer = this.getTimer.bind(this);\n    this.state = {\n      counter: 0,\n      showColor: false,\n      timerIsOver: false,\n      seconds: 30,\n      stopTimer: false,\n    };\n  }\n\n  componentDidMount() {\n    this.saveTriviaOnGlobalState();\n    const ONE_SECOND = 1000;\n    const { stopTimer } = this.state;\n    setInterval(() => {\n      this.setState((prevState) => (\n        {\n          seconds: stopTimer ? prevState.seconds : prevState.seconds - 1,\n        }\n      ));\n      this.getTimer();\n    }, ONE_SECOND);\n    this.resetScore();\n  }\n\n  getTimer() {\n    const { seconds } = this.state;\n    if (seconds <= 0) {\n      this.setState({\n        timerIsOver: true,\n      });\n    }\n  }\n\n  resetScore() {\n    const localStorageState = JSON.parse(localStorage.getItem('state'));\n    const { player } = localStorageState;\n    player.score = 0;\n    player.assertions = 0;\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  saveScore(scoreToAdd) {\n    const localStorageState = JSON.parse(localStorage.getItem('state'));\n    const { player } = localStorageState;\n    player.score += scoreToAdd;\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  increaseAssertion() {\n    const localStorageState = JSON.parse(localStorage.getItem('state'));\n    const { player } = localStorageState;\n    player.assertions += 1;\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  async saveTriviaOnGlobalState() {\n    const { dispatchTrivia } = this.props;\n    const triviaToDispatch = await fetchTrivia();\n    dispatchTrivia(triviaToDispatch);\n  }\n\n  nextQuestion() {\n    const INITIAL_SECONDS = 30;\n    this.setState((prevState) => ({\n      counter: prevState.counter + 1,\n      showColor: false,\n      timerIsOver: false,\n      seconds: INITIAL_SECONDS,\n    }));\n  }\n\n  nextButton() {\n    return (\n      <button\n        type=\"button\"\n        data-testid=\"btn-next\"\n        onClick={ () => {\n          this.nextQuestion();\n        } }\n      >\n        Próxima\n      </button>\n    );\n  }\n\n  colorButton() {\n    this.setState({\n      showColor: true,\n      timerIsOver: true,\n    });\n  }\n\n  handleClick(correctAnswer, difficulty) {\n    this.setState({ stopTimer: true });\n    const { seconds } = this.state;\n    if (correctAnswer) {\n      this.increaseAssertion();\n      let difficulttyMultiplier = 0;\n      const hardMultiplier = 3;\n      switch (difficulty) {\n      case 'hard':\n        difficulttyMultiplier = hardMultiplier;\n        break;\n      case 'medium':\n        difficulttyMultiplier = 2;\n        break;\n      default:\n        difficulttyMultiplier = 1;\n        break;\n      }\n      const baseScore = 10;\n      this.saveScore(baseScore + (seconds * difficulttyMultiplier));\n    }\n  }\n\n  correctQuestion(isCorrect) {\n    const { showColor } = this.state;\n    if (showColor && isCorrect) {\n      return 'correct';\n    }\n    if (showColor && isCorrect === false) {\n      return 'wrong';\n    }\n    return 'test';\n  }\n\n  renderGame() {\n    const { triviaQuest } = this.props;\n    const { counter, seconds, timerIsOver, showColor } = this.state;\n    const carregando = {\n      category: 'Carregando',\n      question: 'Carregando',\n      correct_answer: 'Carregando',\n      incorrect_answers: ['Carregand'],\n    };\n    const questionToBeRendered = triviaQuest[counter] ? triviaQuest[counter] : carregando;\n    const { category, question } = questionToBeRendered;\n    const incorrectAnswersObject = questionToBeRendered.incorrect_answers;\n    const rightAnswer = questionToBeRendered.correct_answer;\n    const allAnswers = [\n      ...incorrectAnswersObject,\n      rightAnswer,\n    ];\n    return (\n      <div>\n        <Header />\n        <h1>JOGO AQUI</h1>\n        <p data-testid=\"question-category\">{category}</p>\n        <p data-testid=\"question-text\">{question.toString()}</p>\n        {allAnswers.sort()\n          .map((answer, index) => (\n            <button\n              disabled={ timerIsOver }\n              className={ this.correctQuestion(answer === rightAnswer) }\n              type=\"button\"\n              key={ index }\n              data-testid={ answer === rightAnswer\n                ? 'correct-answer' : `wrong-answer-${index}` }\n              onClick={ () => {\n                this.colorButton();\n                this.handleClick((answer === rightAnswer),\n                  questionToBeRendered.difficulty);\n              } }\n            >\n              {answer}\n            </button>\n          ))}\n        <p>{seconds > 0 ? seconds : 0}</p>\n        { showColor || timerIsOver ? this.nextButton() : null}\n      </div>\n    );\n  }\n\n  render() {\n    const { counter } = this.state;\n    const maxQuestion = 5;\n    if (counter >= maxQuestion) return <Redirect to=\"/feedback\" />;\n    return (\n      <div>\n        {this.renderGame()}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchTrivia: (state) => dispatch(trivia(state)),\n});\n\nconst mapStateToProps = (state) => ({\n  triviaQuest: state.trivia.results,\n});\n\nGame.propTypes = {\n  triviaQuest: PropTypes.arrayOf(PropTypes.object).isRequired,\n  dispatchTrivia: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","export const login = (state) => ({ type: 'LOGIN', state });\n\nexport const trivia = (state) => ({ type: 'RECEIVE_TRIVIA', state });\n\nexport const chronometre = (state) => ({ type: 'TIMER', state });\n","// const requestApiSuccess = (api) => ({\n//   type: 'API_SUCCESS',\n//   payload: {\n//     api,\n//   },\n// });\n// const requestApiFail = (error) => ({\n//   type: 'API_FAIL',\n//   payload: {\n//     error,\n//   },\n// });\n\nasync function fetchAPI() {\n  try {\n    const tokenRequest = await fetch('https://opentdb.com/api_token.php?command=request');\n    const tokenReturn = await tokenRequest.json()\n      .then((response) => localStorage.setItem('token', response.token));\n    localStorage.setItem('token', tokenReturn.token);\n    // dispatch(requestApiSuccess());\n  } catch (error) {\n    // dispatch(requestApiFail(error));\n  }\n}\n\nexport default fetchAPI;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport fetchToken from '../services/fetchToken';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.checkInput = this.checkInput.bind(this);\n    this.fetchAndRedirect = this.fetchAndRedirect.bind(this);\n    this.state = {\n      name: '',\n      email: '',\n      shouldRedirect: false,\n    };\n  }\n\n  settingsButton() {\n    window.location.href = '/configuracoes';\n  }\n\n  fetchAndRedirect() {\n    const shouldUpdate = fetchToken();\n    if (shouldUpdate) {\n      this.setState({ shouldRedirect: true });\n    }\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n    if (localStorage.getItem('state') === null) {\n      const initialLocalState = { player: {\n        name: '',\n        assertions: 0,\n        score: 0,\n        gravatarEmail: '',\n      } };\n      localStorage.setItem('state', JSON.stringify(initialLocalState));\n    }\n    const actualState = JSON.parse(localStorage.getItem('state'));\n    const { player } = actualState;\n    if (name === 'email') {\n      player.gravatarEmail = value;\n    }\n    if (name === 'name') {\n      player.name = value;\n    }\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  checkInput() {\n    const { name, email } = this.state;\n\n    const emailValidate = (\n      /^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$/\n    );\n    return !(email.match(emailValidate) && name.length > 2);\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/jogo\" />;\n    return (\n      <div>\n\n        <label htmlFor=\"input-text\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            className=\"input-field\"\n            placeholder=\"Name\"\n            onChange={ this.handleChange }\n            data-testid=\"input-player-name\"\n          />\n        </label>\n        <label htmlFor=\"input-email\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"Email\"\n            onChange={ this.handleChange }\n            data-testid=\"input-gravatar-email\"\n          />\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play\"\n          disabled={ this.checkInput() }\n          onClick={ () => this.fetchAndRedirect() }\n        >\n          Jogar\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn-field\"\n          data-testid=\"btn-settings\"\n          onClick={ () => this.settingsButton() }\n        >\n          Configurações\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\n\nexport default class Configuracoes extends Component {\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">CONFIGURAÇÕES</h1>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Header from '../Components/Header';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.renderPlayAgain = this.renderPlayAgain.bind(this);\n    this.state = {\n      playAgain: false,\n    };\n  }\n\n  feedbackMessage() {\n    // capturar a quantidade de questões que acertou (assertions - localStore)\n    // capturar o score (score - localStore)\n    const state = JSON.parse(localStorage.getItem('state'));\n    const { player } = state;\n    const { assertions, score } = player;\n    const MIN_QUESTIONS = 3;\n    return (\n      <div>\n        <p data-testid=\"feedback-text\">\n          {assertions < MIN_QUESTIONS ? 'Podia ser melhor...' : 'Mandou bem!'}\n        </p>\n        <p data-testid=\"feedback-total-score\">{score}</p>\n        <p data-testid=\"feedback-total-question\">{assertions}</p>\n        <button\n          type=\"button\"\n          data-testid=\"btn-ranking\"\n          onClick={ this.renderRanking }\n        >\n          Ver Ranking\n        </button>\n      </div>\n    );\n  }\n\n  renderRanking() {\n    window.location.href = '/ranking';\n  }\n\n  renderPlayAgain() {\n    this.setState({ playAgain: true });\n  }\n\n  render() {\n    const { playAgain } = this.state;\n    if (playAgain) return <Redirect to=\"/\" />;\n    return (\n      <div>\n        <Header />\n        {this.feedbackMessage()}\n        <button\n          type=\"button\"\n          onClick={ this.renderPlayAgain }\n          data-testid=\"btn-play-again\"\n        >\n          Jogar Novamente\n        </button>\n      </div>\n    );\n  }\n}\nexport default Feedback;\n","import React, { Component } from 'react';\nimport fetchGravatarImage from '../services/fetchGravatarImage';\n\nexport default class Ranking extends Component {\n  constructor(props) {\n    super(props);\n    this.getPlayers = this.getPlayers.bind(this);\n    this.state = {\n      allPlayers: [],\n    };\n  }\n\n  componentDidMount() {\n    this.savePlayerInRanking();\n    this.getPlayers();\n  }\n\n  getPlayers() {\n    const allPlayers = JSON.parse(localStorage.getItem('ranking'));\n    this.setState({ allPlayers });\n  }\n\n  savePlayerInRanking() {\n    const state = JSON.parse(localStorage.getItem('state'));\n    const { player } = state;\n    const rankingTest = localStorage.getItem('ranking');\n    if (rankingTest === null) localStorage.setItem('ranking', JSON.stringify([]));\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    const newPlayer = {\n      name: player.name,\n      score: player.score,\n      picture: fetchGravatarImage(player.gravatarEmail),\n    };\n    ranking.push(newPlayer);\n    localStorage.setItem('ranking', JSON.stringify(ranking));\n  }\n\n  renderInitialPage() {\n    window.location.href = '/';\n  }\n\n  render() {\n    const { allPlayers } = this.state;\n    return (\n      <div>\n        <p data-testid=\"ranking-title\">Ranking</p>\n        <ul>\n          {allPlayers.sort((a, b) => b.score - a.score)\n            .map((player, index) => (\n              <li\n                key={ index }\n              >\n                <img\n                  src={ player.picture }\n                  alt=\"your avatar\"\n                />\n                <p data-testid={ `player-name-${index}` }>{player.name}</p>\n                <p data-testid={ `player-score-${index}` }>{player.score}</p>\n              </li>))}\n        </ul>\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ this.renderInitialPage }\n        >\n          Inicio\n        </button>\n      </div>\n    );\n  }\n}\n// linter\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Game from './Pages/Game';\nimport Login from './Pages/Login';\nimport Configuracoes from './Pages/Configuracoes';\nimport Feedback from './Pages/Feedback';\nimport Ranking from './Pages/Ranking';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/jogo\" component={ Game } />\n        <Route exact path=\"/configuracoes\" component={ Configuracoes } />\n        <Route exact path=\"/feedback\" component={ Feedback } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialStore = {\n  user: {\n    email: '',\n    name: '',\n  },\n};\n\nfunction loginReducer(state = initialStore, action) {\n  switch (action.type) {\n  case 'LOGIN':\n    return {\n      ...state,\n      user: action.state,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default loginReducer;\n","const initialState = {\n  results: [{\n    category: 'Carregando',\n    question: 'Carregando',\n    correct_answer: 'Carregando',\n    incorrect_answers: ['Carregand'],\n  }],\n};\n\nfunction trivia(state = initialState, action) {\n  switch (action.type) {\n  case 'RECEIVE_TRIVIA':\n    return {\n      ...state,\n      results: action.state.results,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default trivia;\n","const initialState = {\n  timerIsOver: false,\n};\n\nfunction timer(state = initialState, action) {\n  switch (action.type) {\n  case 'TIMER':\n    return {\n      timerIsOver: action.state,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default timer;\n","import { combineReducers } from 'redux';\nimport loginReducer from './loginReducer';\nimport trivia from './triviaReducer';\nimport timer from './timerReducer';\n\nconst rootReducer = combineReducers({ loginReducer, trivia, timer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}